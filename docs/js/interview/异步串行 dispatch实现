const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
const log = _ => console.log(_)
const flat = (arr, depth = 1) =>
  arr.reduce((a, v) => a.concat(depth > 1 && Array.isArray(v) ? flat(v, depth - 1) : v), [])


const subFlow = createFlow([() => delay(1000).then(() => log("c"))]);

createFlow([
  () => log("a"),
  () => log("b"),
  subFlow,
  [() => delay(1000).then(() => log("d")), () => log("e")],
]).run(() => {
  console.log("done");
});

// 需要按照 a,b,延迟1秒,c,延迟1秒,d,e, done 的顺序打印

function createFlow (effects = []) {
  const middleware = flat(effects.map(item => item.middleware ? item.middleware : item), Infinity)

  return {
    run: function (cb) {
      // last called middleware #
      let index = -1
      return dispatch(0)

      function dispatch (i) {
        if (i <= index) return Promise.reject()
        index = i
        let fn = middleware[i]
        if (i === middleware.length) fn = null
        if (!fn) return Promise.resolve()
        try {
          return Promise.resolve(fn()).then(dispatch.bind(null, i + 1));
        } catch (err) {
          return Promise.reject(err)
        }
      }
    },
    middleware
  }
}